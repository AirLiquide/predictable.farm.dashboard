

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset=utf-8>
		<meta content="IE=edge" http-equiv=X-UA-Compatible>
		<meta content="width=device-width,initial-scale=1" name=viewport>

		<title>Predictable Farm</title>
		<link rel="stylesheet" type="text/css" href="/lib/bootstrap-3.3.7-dist/css/bootstrap.min.css" />
		<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
		<link rel="stylesheet" type="text/css" href="/lib/dragula-3.7.2/dragula.min.css" />
		<link rel="stylesheet" type="text/css" href="/css/gutter.css" />
		<link rel="stylesheet" type="text/css" href="/css/submenu.css" />
		<link rel="stylesheet" type="text/css" href="/css/style.css" />
		<link rel="stylesheet" type="text/css" href="/css/onglet.css" />
		<link rel="stylesheet" type="text/css" href="/css/responsive.scss" />
	</head>
	<body>
		<%- include navbar.ejs %>

		<div class="container-new" id="ui-container"></div>

		<script type="text/javascript" src="/lib/jquery-3.1.0/jquery-3.1.0.min.js"></script>
		<script type="text/javascript" src="/lib/bootstrap-3.3.7-dist/js/bootstrap.min.js"></script>
		<script type="text/javascript" src="/lib/mustache-2.2.1/mustache.min.js"></script>

		<script type="text/javascript" src="/lib/highcharts-5.0.6/code/highcharts.js"></script>

		<script type="text/javascript" src="/lib/dragula-3.7.2/dragula.min.js"></script>
		<script type="text/javascript" src="/socket.io/socket.io.js"></script>

		<script type="text/javascript" src="/lib/Tools.js"></script>
		<script type="text/javascript" src="/lib/SetupClient.js"></script>
		<script type="text/javascript" src="/lib/DataCache.js"></script>
		<script type="text/javascript" src="/lib/DataKiosk.js"></script>
		<script type="text/javascript" src="/lib/LiveLabel.js"></script>
		<script type="text/javascript" src="/lib/Template.js"></script>
		<script type="text/javascript" src="/lib/TemplateBlock.js"></script>
		<script type="text/javascript" src="/lib/LongPress.js"></script>
		<script type="text/javascript" src="/lib/ProbeEditor.js"></script>
		<script type="text/javascript" src="/lib/DashboardBlockEditor.js"></script>
		<script type="text/javascript" src="/templates.js"></script>

		<script type="text/javascript">
		/**********/
		/* CONFIG */
		/**********/
		var configSensorType = {
			'temperature' : { style : 'celcius-degrees', label : 'Température', class : 'air' },
			'pressure' : { style : 'pascal-to-hectopascal', label : 'Pression Atmosphérique', class : 'air' },
			'lux' : { style : 'lux', label : 'Luminosité', class : 'light' },
			'sunuvlight' : { label : 'UV (Ultraviolet)', class : 'light' },
			'sunvisiblelight' : { label : 'Lumière visible', class : 'light' },
			'sunirlight' : { label : 'IR (Infrarouge)', class : 'light' },
			'humidity' : { style : 'percent', label : 'Humidité', class : 'air' },
			'misttemperature' : { style : 'celcius-degrees', label : 'Température brume', class : 'nutrient' },
			'airquality' : { style : 'air-quality', label : 'Qualité de l\'air', class : 'air' },
			'redlight' : { label : 'Lumière rouge', class : 'light' },
			'greenlight' : { label : 'Lumière verte', class : 'light' },
			'bluelight' : { label : 'Lumière bleue', class : 'light' },
			'dust' : { label : 'Poussières', class : 'air' }
		};
		for (var i=1; i <= 12; i++) {
			configSensorType['relay' + i] = { style : 'relay', label : 'Relai #' + i, class : 'relay' };
		}


		var configLabelStyle = {
			'lux' : [{ format : '[value] <span class="unit">lux</span>' }],
			'ppm' : [{ format : '[value] <span class="unit">ppm</span>' }],
			//'celcius-degrees' : [{ format : '[value]°C' }],
			'celcius-degrees' : [{ format : function(value, element) { element.innerHTML = (value/1).toFixed(1) + '°C' }}],
			'percent' : [{ format : '[value]%' }],
			'pascal' : [{ format : '[value] <span class="unit">Pa</span>' }],
			'hectopascal' : [{ format : '[value] <span class="unit">hPa</span>' }],
			'pascal-to-hectopascal' : [{ format : function(value, element) { element.innerHTML = (value/100).toFixed(2) + ' <span class="unit">hPa</span>'; } }],
			'ohm' : [{ format : '[value] <span class="unit">Ohm</span>' }],
			'volt' : [{ format : '[value] <span class="unit">V</span>' }],

			'air-quality' : [
				{ minValue : 0, format : 'Très mauvaise', className : 'air-quality-very-bad' },
				{ minValue : 1, format : 'Mauvaise', className : 'air-quality-bad' },
				{ minValue : 2, format : 'Bonne', className : 'air-quality-good' },
				{ minValue : 3, format : 'Très bonne', className : 'air-quality-very-good', }
			],
			'just-refresh' : [{ format : function() { return; }}],
			'relay' : [{ minValue : 0, format : 'off' }, { minValue : 1, format : 'on' }]
		};

		var setup = new SetupClient(<%- JSON.stringify(setup) %>, configSensorType);

		// Component that handle new data arrival
		var kiosk = new DataKiosk();

		// Component that handle data cache
		var cache = new DataCache();

		// Add the last sensor data to the kiosk
		setup.addLastValueToKiosk(kiosk);

		/***************/
		/* SOCKET DATA */
		/***************/

		// Live connection to the server
		var socket = io.connect('/');
		socket.on('connect', function() {
			socket.emit('hello');
		});

		// New data arrival
		socket.on('data-update', function(data) {
			// Convert data to DataKiosk format
			data.id = data.device_id + ':' + data.sensor_type;
			data.type = data.sensor_type;
			data.value = data.sensor_value;
			data.time = (new Date().toISOString().slice(0, 19).replace('T', ' '));

			// Publish new data to the kiosk
			kiosk.write([data]);
			kiosk.publish();
		});

		/*************************/
		/* TEMPLATE & NAVIGATION */
		/*************************/

		var template = new Template();
		template.setBlocks(greenhouse_templates); // from /templates.js

		setup.selectZone(0);

		var templateContent = {
			zones : setup.getListZone(),
			zone : setup.getSelectedZone(),
			probe : {},
			probes : setup.getListProbeByZone(setup.getSelectedZone().id_zone),
			sensors : setup.getListSensorByProbe(1),
			dashboards : [],

			periodLabel : function() {
				return 'De ' + (new Date(chartStart).toDateString()) + ' à ' + (new Date(chartStart + chartPeriod).toDateString());
			},

			// dashboard blocks sensor list renderer
			dashboardBlock_addSensor : function() {
				var dashboardBlock = this;

				// Check if a sensor is already in a dashboard block
				var isSensorInDashboardBlock = function(id_sensor) {
					for (var i=0; i < dashboardBlock.sensors.length; i++) {
						if (dashboardBlock.sensors[i].id_sensor == id_sensor) {
							return true;
						}
					}

					return false;
				};

				// Creates the html for a zone's menu
				var getZoneMenu = function(id_zone, boldZone) {
					if (typeof boldZone !== 'boolean') {
						boldZone = false;
					}

					var zone = setup.getZone(id_zone);
					var html = '';
					html += '<li class="dropdown-header">';
					if (boldZone) { html += '<strong>'; }
					html += zone.name;
					if (boldZone) { html += '</strong>'; }
					html += '</li>';

					var probes = setup.getListProbeByZone(zone.id_zone);
					var sensors;

					var disabled = '';
					var onclick = '';
					for (var i=0; i < probes.length; i++) {
						sensors = setup.getListSensorByProbe(probes[i].id_probe);

						html += '<li class="title-sensors">';
							html += '<a href="javascript:;">' + probes[i].name + '</a>';
							html += '<ul class="list-btn">';
								for (var j=0; j < sensors.length; j++) {
									// Check if the sensor is already in the block
									if (isSensorInDashboardBlock(sensors[j].id_sensor)) {
										disabled = ' disabled';
										onclick = '';
									}
									else {
										disabled = '';
										onclick = ' onclick="setup.addSensorToDashboardBlock(' + dashboardBlock.id_zone + ', ' + dashboardBlock.dashboard_index + ', ' + dashboardBlock.block_index + ', ' + sensors[j].id_sensor + ', urlChangeHandler)"';
									}

									html += '<li class="btn btn-add btn-' + sensors[j].class   + disabled + '"' +  '>';
									html += '<a href="javascript:;"' + onclick + '>';
										html += sensors[j].label;
									html += '</a></li>';
								}
							html += '</ul> ';
						html += '</li>';
					}

					return html;
				}

				var html = '';

				var zones = setup.getListZone();
				var zoneSelected = setup.getSelectedZone();

				// Selected zone is first
				html += getZoneMenu(zoneSelected.id_zone, true);
				html += '<li class="divider"></li>';

				// Other zones for (var i=0; i < zones.length; i++)
				for (var i=0; i < 1; i++) {
					if (zones[i].id_zone == zoneSelected.id_zone) {
						continue;
					}

					html += getZoneMenu(zones[i].id_zone);
				}

				return html;
			}
		};
		template.setContent(templateContent);

		// Editor block that appear when your longpress a probe tab
		var probeEditor = new ProbeEditor();
		// Editor block that appear when your longpress a dashboard block title tab
		var dashboardBlockEditor = new DashboardBlockEditor();

		var uiContainer = document.getElementById('ui-container');
		var renderUI = function(uiType) {
			kiosk.unsubscribeAll();

			var blocks = [
				'zone_selector',
				'probe_selector',
				'period_selector'
			];

			switch (uiType) {
				case 'dashboard':
					blocks.push('dashboard_blocks');
					blocks.push('dashboard_create_block');
				break;
				case 'dashboard_empty':
					blocks.push('dashboard_empty');
					blocks.push('dashboard_create_block');
				break;

				case 'probe':
					blocks.push('sensor_group');
				break;

				case 'not_found':
					blocks.push('not_found');
				break;
			}

			template.render(uiContainer, blocks);

			// Live labels
			initLiveLabels();

			// TODO Relay value changing
			initRelayDoubleClick();

			initDashboardToggles();

			// Probe list : long press handling
			initProbeListLongpress(function(e) {
				var target = e.target;
				if (target.tagName != 'A') {
					target = target.parentNode;
				}

				var type = target.getAttribute('data-type');

				probeEditor.show(target, {
					renamable : true,
					deletable : (type === 'dashboard'),
					movable : false,
					transferable : false,
					onrename : function(renameData) {
						var type = target.getAttribute('data-type');

						if (type === 'probe') {
							var id_probe = target.getAttribute('data-id-probe');

							// probe object is modified + xhr to change server setup
							setup.renameProbe(id_probe, renameData.name);
						}
						else if (type === 'dashboard') {
							var id_zone = target.getAttribute('data-id-zone');
							var dashboard_index = target.getAttribute('data-dashboard_index');

							// dashboard object is modified + xhr to change server setup
							setup.renameDashboard(id_zone, dashboard_index, renameData.name);
						}
					},
					ondelete : function() {
						if (type === 'dashboard') {
							var id_zone = target.getAttribute('data-id-zone');
							var dashboard_index = target.getAttribute('data-dashboard_index');

							// dashboard object is delete + xhr to change server setup
							setup.deleteDashboard(id_zone, dashboard_index);

							urlChangeHandler();
						}
					}
				});
			});

			// Dashboard block name : long press handling
			initDashboardBlockNameLongpress(function(e) {
				var target = e.target;
				if (target.tagName != 'DIV') {
					target = target.parentNode;
				}

				dashboardBlockEditor.show(target, {
					renamable : true,
					deletable : true,
					movable : false,
					transferable : false,
					onrename : function(renameData) {
						var id_zone = target.getAttribute('data-id_zone');
						var dashboard_index = target.getAttribute('data-dashboard_index');
						var block_index = target.getAttribute('data-block_index');

						// dashboard object is modified + xhr to change server setup
						setup.renameDashboardBlock(id_zone, dashboard_index, block_index, renameData.name);
					},
					ondelete : function(deleteData) {
						var id_zone = target.getAttribute('data-id_zone');
						var dashboard_index = target.getAttribute('data-dashboard_index');
						var block_index = target.getAttribute('data-block_index');

						// dashboard object is modified + xhr to change server setup
						setup.deleteDashboardBlock(id_zone, dashboard_index, block_index);

						// refresh display
						urlChangeHandler();
					}
				});
			});

			// Period selector
			initPeriodSelector();

			// Charts (WILL CHANGE)
			loadChart();

			// Drag&Drop for tiles
			var dragSensor = dragula([document.getElementById('sensor-list')], {
				moves : function(el, container, handle) {
					return handle.classList.contains('block-handle-icon');
				}
			});
			dragSensor.on('drop', function(el, target, source, sibling) {
				var listChildren = target.getElementsByClassName('sensor-block');
				var listSensorId = [];
				for (var i=0; i < listChildren.length; i++) {
					listSensorId.push(listChildren[i].getAttribute('data-id_sensor'));
				}

				// Update locally & on the server
				setup.sortSensors(listSensorId);
			});

			var dashboardBlocks = document.getElementsByClassName('dashboard-block');
			for (var i=0; i < dashboardBlocks.length; i++) {
				var dragContainers = dashboardBlocks[i].getElementsByClassName('row-content');

				// transform the HTMLCollection to Array for Dragula
				var dragContainers = [].slice.call(dragContainers);

				var dragDash = dragula(dragContainers, {
					moves : function(el, container, handle, sibling) {
						return handle.classList.contains('block-handle-icon');
					},
					accepts : function(el, target, source, sibling) {
						// We cannot move the block to the last position (there's the "add" button already there)
						return (sibling != null);
					}
				});

				dragDash.on('drop', function(el, target, source, sibling) {
					// listing sensor_ids in the right order
					var listChildren = target.getElementsByClassName('sensor-block');
					var	listSensorId = [];
					for (var i=0; i < listChildren.length; i++) {
						listSensorId.push(listChildren[i].getAttribute('data-id_sensor'));
					}

					var id_zone = source.getAttribute('data-id_zone');
					var dashboard_index = source.getAttribute('data-dashboard_index');
					var block_index = source.getAttribute('data-block_index');

					// Update locally & on the server
					setup.sortDashboardBlockSensors(id_zone, dashboard_index, block_index, listSensorId);
				});
			};

		};

		var initProbeListLongpress = function(longpressCallback) {
			var probeSelector = document.getElementsByClassName('probe-selector');
			if (probeSelector.length > 0) {
				probeSelector = probeSelector[0];

				var link;
				var links = probeSelector.getElementsByTagName('a');
				for (var iLink=0; iLink < links.length; iLink++) {
					new LongPress(links[iLink], longpressCallback);
				}
			}
		};

		var initDashboardBlockNameLongpress = function(longpressCallback) {
			var blockSelector = document.getElementsByClassName('dashboard-block');
			if (blockSelector.length > 0) {
				for (var i=0; i < blockSelector.length; i++) {
					var block = blockSelector[i];
					var titleSelector = block.getElementsByClassName('row-dashboard-title');

					new LongPress(titleSelector[0], longpressCallback);
				}
			}
		};

		var initDashboardToggles = function() {
			var _toggleClickHandler = function(e) {
				var toggle = e.target;
				if (e.target.tagName == 'I') {
					toggle = toggle.parentNode;
				}
				var toggleType = toggle.getAttribute('data-toggle-type');

				// fetching dashboard block identifiers
				var titleContainer = toggle.parentNode.parentNode;
				var id_zone = titleContainer.getAttribute('data-id_zone');
				var dashboard_index = titleContainer.getAttribute('data-dashboard_index');
				var block_index = titleContainer.getAttribute('data-block_index');

				var dashContainer = titleContainer.parentNode;
				var blockData = setup.getDashboardBlock(id_zone, dashboard_index, block_index);

				if (toggleType === "sensor") {
					var toggledBlock = dashContainer.getElementsByClassName('row-content')[0];
					var toggledProperty = 'displaySensor';
				}
				else if (toggleType === "chart") {
					var toggledBlock = dashContainer.getElementsByClassName('row-chart')[0];
					var toggledProperty = 'displayChart';
				}

				// changing visibility in the local data
				blockData[toggledProperty] = !blockData[toggledProperty];

				// registering changes to the db
				setup.updateZone(id_zone);

				if (blockData[toggledProperty]) {
					Tools.addClass(toggle, 'btn-primary');
					Tools.removeClass(toggle, 'btn-default');
					Tools.removeClass(toggledBlock, 'hidden');

					if (toggleType === 'chart') {
						for (var i=0; i < charts.length; i++) {
							charts[i].redraw();
						}
					}
				}
				else {
					Tools.removeClass(toggle, 'btn-primary');
					Tools.addClass(toggle, 'btn-default');
					Tools.addClass(toggledBlock, 'hidden');
				}
			};

			// Add event handler to the toggles
			var toggleBlocks = document.getElementsByClassName('dashboard-toggles');
			for (var i=0; i < toggleBlocks.length; i++) {
				//var toggleBlock = toggleBlocks[i];
				var toggles = toggleBlocks[i].getElementsByTagName('button');
				for (var j=0; j < toggles.length; j++) {
					toggles[j].addEventListener('click', _toggleClickHandler);
				}
			}
		};

		var initRelayDoubleClick = function() {
			var _dblclickHandler = function(e) {
				var currentValue = e.target.getAttribute('data-live-label-value');

				var url = '/change-relay';
				url += '?device_id=' + e.target.getAttribute('data-device_id');
				url += '&sensor_type=' + e.target.getAttribute('data-sensor_type');
				url += '&sensor_value=' + (currentValue == 1 ? '0' : '1');

				$.get(url);
			};

			var relays = document.getElementsByClassName('relay');
			for (var i=0; i < relays.length; i++) {
				var labels = relays[i].getElementsByClassName('live-label');
				if (labels.length === 0) {
					continue;
				}

				labels[0].addEventListener('dblclick', _dblclickHandler);
			}
		};

		// Prevent context menu on longpress on mobile phones
		window.oncontextmenu = function(e) {
			e.preventDefault();
			e.stopPropagation();
			return false;
		};

		/***************/
		/* LIVE LABELS */
		/***************/
		var initLiveLabels = function() {
			var createSubscribeCallback = function(liveLabel, sensorId) {
				return function(data, freshData) {
					if (typeof data[sensorId] !== 'undefined') {
						liveLabel.setValue(data[sensorId].value);
					}
					else {
						liveLabel.setValue();
					}
				};
			};

			var labels = document.getElementsByClassName('live-label');
			for (var i=0; i < labels.length; i++) {
				var label = labels[i];
				var sensorId = label.getAttribute('data-live-label-id');

				if (!!sensorId) {
					var live = new LiveLabel();
					live.addElement(label);

					var styleName = label.getAttribute('data-live-label-style');
					var styles = [];
					if (!!styleName && (styles = configLabelStyle[styleName])) {
						for (var j=0; j < styles.length; j++) {
							live.addStyle(styles[j]);
						}
					}

					kiosk.subscribe(sensorId, createSubscribeCallback(live, sensorId), true);
				}
			}
		};

		/*********/
		/* CHART */
		/*********/

		// default chart dates are today
		var now = new Date();
		var chartStart = Math.floor(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 1).getTime());
		var chartPeriod = (1000*60*60*24);
		var charts = [];

		var initPeriodSelector = function() {
			var dayDuration = 1000*60*60*24;
			var chartPeriods = {
				day : dayDuration,
				week : (dayDuration * 7),
				month : (dayDuration * 30),
				year : (dayDuration * 365)
			};

			var btnPeriodPrefix = 'period_selector_';
			var _btnPeriodClick = function(e) {
				var clicked = e.target;
				var clickedPeriod = e.target.id.substr(btnPeriodPrefix.length);

				// change period
				chartPeriod = chartPeriods[clickedPeriod];

				for (var period in chartPeriods) {
					var btn = document.getElementById(btnPeriodPrefix + period);

					if (chartPeriod === chartPeriods[period]) {
						btn.className = 'btn btn-default invisible-btn-text invisible-btn-active ';
					}
					else {
						btn.className = 'btn btn-default invisible-btn-text';
					}
				}

				urlChangeHandler();
			};

			for (var period in chartPeriods) {
				var btn = document.getElementById(btnPeriodPrefix + period);

				// first init with first period (day)
				if (!chartPeriod) {
					chartPeriod = chartPeriods[period];
				}

				if (btn) {
					if (chartPeriod === chartPeriods[period]) {
						btn.className = ' invisible-btn-text invisible-btn-active';
					}
					else {
						btn.className = ' invisible-btn-text';
					}

					btn.addEventListener('click', _btnPeriodClick);
				}
			}

			var btnNavPrefix = 'period_navigation_';
			var _btnNavClick = function(e) {
				var clicked = e.target;
				var clickedNav = e.target.id.substr(btnNavPrefix.length);

				if (clickedNav === 'next') {
					chartStart += chartPeriod;
				}
				else {
					chartStart -= chartPeriod;
				}

				urlChangeHandler();
			};

			document.getElementById(btnNavPrefix + 'previous').addEventListener('click', _btnNavClick);
			document.getElementById(btnNavPrefix + 'next').addEventListener('click', _btnNavClick);
		};

		var loadChart = function() {
			var utc2datetime = function(utc, separator) {
				if (typeof separator === 'undefined') {
					separator = ' ';
				}

				var date = new Date(utc);

				var datetime = date.getFullYear() + '-';
				datetime += (date.getMonth() < 10 ? '0' : '') + (date.getMonth()+1) + '-';
				datetime += (date.getDate() < 10 ? '0' : '') + date.getDate();
				datetime += separator;
				datetime += (date.getHours() < 10 ? '0' : '') + date.getHours() + ':';
				datetime += (date.getMinutes() < 10 ? '0' : '') + date.getMinutes() + ':';
				datetime += (date.getSeconds() < 10 ? '0' : '') + date.getSeconds();

				return datetime;
			};

			// get all the charts in the page
			var chartTags = document.getElementsByClassName('row-chart');
			var allNeededSensors = {};

			for (var i=0; i < chartTags.length; i++) {
				var sensor_ids = chartTags[i].getAttribute('data-sensor_ids')
				var chartNeededSensors = sensor_ids.split(',');

				for (var j=0; j < chartNeededSensors.length; j++) {
					var id_sensor = chartNeededSensors[j];

					// add the id_sensor to those wanted
					allNeededSensors[id_sensor] = true;
				}
			}

			// we check if we already have data for what is asked
			var isCacheEnough = true;
			var neededSensors = [];
			for (var id_sensor in allNeededSensors) {
				var missing = cache.checkMissingCache(id_sensor, chartStart, (chartStart + chartPeriod));

				allNeededSensors[id_sensor] = missing;

				if (missing !== false) {
					isCacheEnough = false;
					neededSensors.push(id_sensor);
				}
			}

			var displayChart = function() {
				charts = [];
				for (var i=0; i < chartTags.length; i++) {
					// TODO highcharts from cache
					var sensor_ids = chartTags[i].getAttribute('data-sensor_ids');
					var chartSensors = sensor_ids.split(',');

					var series = [];
					var yAxis = [];
					var yAxisIndex = {};

					for (var j=0; j < chartSensors.length && j < 4; j++) {
						var optiIndex = 0
						var sensor = setup.getSensor(chartSensors[j]);

						// create a new axis if needed
						var yAxisId;
						if (typeof yAxisIndex[sensor.type] === 'undefined') {
							yAxisId = yAxis.length;
							yAxis.push({
								//labels : { format : '{value}°C', style : { color : 'red' }},
								showEmpty : false,
								title : {
									text : sensor.label
									//style : { color : 'red' }
								}
							});
							yAxisIndex[sensor.type] = yAxisId;
						}
						else {
							yAxisId = yAxisIndex[sensor.type];
						}

							series.push({
								type : 'spline',
								name : sensor.label,
								data : cache.getCache(sensor.id_sensor, chartStart, (chartStart + chartPeriod), false),
								yAxis : yAxisId
							});


							var temp = []
							var newTemp = series[j].data
							for (indexZ = 0; indexZ < newTemp.length; indexZ++) {
									temp.push(newTemp[indexZ])
									indexZ = indexZ + 5

							}
							series[j].data = temp
					}



					charts.push(Highcharts.chart(chartTags[i], {
						chart : {
							zoomType : 'x'
						},
						title : {
							text : ''
						},
						xAxis : {
							type : 'datetime'
						},
						yAxis : yAxis,
						legend : {
							enabled : true
						},
						series : series
					}));
				}
			};

			if (isCacheEnough) {
				//console.debug('CACHE WAS ENOUGH');
				displayChart();
			}
			else {
				//console.debug('GETTING NEW DATA');
				var url = '/get-list-reading'
				url += '?date_format=microtime';
				url += '&sensors=' + neededSensors.join(',');
				url += '&from=' + (chartStart - chartPeriod);
				url += '&to=' + ((chartStart + chartPeriod) + chartPeriod);
				url += '&format=jsonp';
				url += '&callback=?';

				$.getJSON(url, function(data) {
					for (var id_probe in data) {
						cache.setCache(id_probe, data[id_probe]);
					}

					displayChart();
				}, 'json');
			}
		};

		/***************/
		/* URL MANAGER */
		/***************/
		var urlChangeHandler = function() {
			//unselectAll();

			var hash = window.location.hash;
			hash = hash.replace("#", "");
			if (hash === '') {
				hash = 'zone-0';
			}

			// Unselect previous selection
			setup.unselectZone(templateContent.zones[0].id_zone);
			setup.unselectProbe();
			setup.unselectDashboard();
			templateContent.zone = templateContent.zones[0];
			templateContent.probe = {};
			templateContent.probes = setup.getListProbeByZone(templateContent.zones[0].id_zone);
			templateContent.sensors = [];
			templateContent.dashboard = {};

			var hashPieces = hash.split('-');
			var uiType = hashPieces[0];
			switch (hashPieces[0]) {
				// DEPRACATED ?
				case 'zone':
					// Update selections
					var id_zone = hashPieces[1];
					setup.selectZone(id_zone);

					// Update content
					templateContent.zone = setup.getSelectedZone();
					templateContent.probes = setup.getListProbeByZone(id_zone);
					//templateContent.sensors = setup.getListSensorByZone(id_zone);

					// Change title
					changeTitle(setup.getSelectedZone().name);
				break;

				case 'probe':
					// Update selections
					var id_probe = hashPieces[1];
					var uuid = hashPieces[2];

					var probe = setup.getProbe(id_probe);
					var zone = setup.getZone(probe.id_zone);

					// Update selections
					setup.selectProbe(id_probe);
					setup.selectZone(probe.id_zone)

					templateContent.zone = setup.getZone(probe.id_zone);
					templateContent.probe = probe;
					templateContent.probes = setup.getListProbeByZone(probe.id_zone);
					templateContent.sensors = setup.getListSensorByProbe(probe.id_probe);
					//templateContent.dashboard = {};

					changeTitle(probe.name + ' - ' + zone.name);
				break;

				case 'dashboard':
					var id_zone = hashPieces[1];
					var index_dashboard = hashPieces[2];

					var dashboard = setup.getDashboard(id_zone, index_dashboard);
					if (!dashboard) {
						uiType = 'not_found';
						break;
					}
					var zone = setup.getZone(id_zone);

					setup.selectZone(id_zone);
					setup.selectDashboard(id_zone, index_dashboard);

					templateContent.zone = setup.getZone(id_zone);
					templateContent.probes = setup.getListProbeByZone(id_zone);
					templateContent.dashboard = dashboard;

					changeTitle(dashboard.name + ' - ' + zone.name);

					if (dashboard.blocks.length == 0) {
						uiType = 'dashboard_empty';
					}
				break;

				default:
					uiType = 'not_found';
				break;
			};

			renderUI(uiType);
		};

		var changeTitle = function(title) {
			document.title = title + " - Predictable Farm"
		};

		window.addEventListener("hashchange", urlChangeHandler);
		urlChangeHandler();

		var openDropDown = function() {
    	var x = document.getElementById('arrow-down');
	    if (x.style.display === 'none'){
				document.getElementById('shadow-dropdown').style.display = 'block';
				document.getElementById('dropdown-menu').style.display = 'block';
				  x.style.display = 'block';
	    } else {
				document.getElementById('shadow-dropdown').style.display = 'none';
				document.getElementById('dropdown-menu').style.display = 'none';
	        x.style.display = 'none';
	    }
		}
		</script>
	</body>
</html>
